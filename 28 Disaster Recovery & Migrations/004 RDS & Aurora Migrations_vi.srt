1
00:00:00,300 --> 00:00:01,920
Đây là một bài ngắn

2
00:00:01,920 --> 00:00:03,900
mà tiếc là bạn phải học cho kỳ thi,

3
00:00:03,900 --> 00:00:05,190
có thể chỉ cho một câu hỏi.

4
00:00:05,190 --> 00:00:08,760
Đó là cách để migrate sang Aurora MySQL.

5
00:00:08,760 --> 00:00:10,680
Nếu bạn có một RDS database

6
00:00:10,680 --> 00:00:13,380
và muốn chuyển nó sang Aurora MySQL,

7
00:00:13,380 --> 00:00:15,630
tùy chọn đầu tiên là tạo database snapshot

8
00:00:15,630 --> 00:00:17,460
từ RDS MySQL

9
00:00:17,460 --> 00:00:21,030
và restore snapshot đó thành Aurora MySQL.

10
00:00:21,030 --> 00:00:22,680
Có thể bạn sẽ có downtime

11
00:00:22,680 --> 00:00:24,510
vì phải dừng hoạt động

12
00:00:24,510 --> 00:00:28,050
trên MySQL ban đầu trước khi chuyển sang Aurora.

13
00:00:28,050 --> 00:00:30,060
Tùy chọn thứ hai liên tục hơn

14
00:00:30,060 --> 00:00:34,020
là tạo một Amazon Aurora Read Replica

15
00:00:34,020 --> 00:00:35,550
trên RDS MySQL của bạn.

16
00:00:35,550 --> 00:00:37,410
Đây là khả năng có thể.

17
00:00:37,410 --> 00:00:39,120
Khi Replica lag bằng 0,

18
00:00:39,120 --> 00:00:41,100
tức là khi Aurora Replica

19
00:00:41,100 --> 00:00:43,110
đã bắt kịp MySQL,

20
00:00:43,110 --> 00:00:46,140
bạn có thể promote nó thành database cluster riêng.

21
00:00:46,140 --> 00:00:47,730
Cách này mất nhiều thời gian hơn

22
00:00:47,730 --> 00:00:49,440
so với phương án snapshot

23
00:00:49,440 --> 00:00:51,930
và tốn chi phí do network cost

24
00:00:51,930 --> 00:00:55,650
liên quan đến replication này.

25
00:00:55,650 --> 00:00:59,100
Tùy chọn khác: nếu bạn có MySQL database

26
00:00:59,100 --> 00:01:01,350
bên ngoài RDS,

27
00:01:01,350 --> 00:01:03,240
bạn có thể backup nó

28
00:01:03,240 --> 00:01:07,110
bằng công cụ Percona XtraBackup.

29
00:01:07,110 --> 00:01:10,440
Điều này tạo file backup và bạn đặt vào Amazon S3

30
00:01:10,440 --> 00:01:12,810
và Aurora có tùy chọn

31
00:01:12,810 --> 00:01:15,150
để import trực tiếp file backup

32
00:01:15,150 --> 00:01:18,270
vào một Aurora MySQL DB cluster mới.

33
00:01:18,270 --> 00:01:19,103
Lưu ý

34
00:01:19,103 --> 00:01:22,380
chỉ hỗ trợ công cụ Percona XtraBackup.

35
00:01:22,380 --> 00:01:26,040
Tùy chọn khác là dùng MySQL Dump

36
00:01:26,040 --> 00:01:28,800
chạy trên MySQL database

37
00:01:28,800 --> 00:01:31,020
và bạn pipe output của nó

38
00:01:31,020 --> 00:01:34,020
vào Amazon Aurora database hiện có.

39
00:01:34,020 --> 00:01:35,940
Điều này mất rất nhiều thời gian

40
00:01:35,940 --> 00:01:38,520
và không tận dụng Amazon S3.

41
00:01:38,520 --> 00:01:41,310
Tùy chọn cuối là dùng Amazon DMS,

42
00:01:41,310 --> 00:01:43,380
nếu cả hai database đều chạy

43
00:01:43,380 --> 00:01:46,203
để replicate liên tục giữa hai database.

44
00:01:47,340 --> 00:01:49,980
Chúng ta làm tương tự cho PostgreSQL,

45
00:01:49,980 --> 00:01:52,650
nên với RDS cũng khá giống.

46
00:01:52,650 --> 00:01:56,190
Bạn có hai lựa chọn: dùng database snapshot

47
00:01:56,190 --> 00:01:58,530
restore thành Amazon Aurora database

48
00:01:58,530 --> 00:02:02,280
hoặc tạo Amazon Aurora Read Replica của PostgreSQL

49
00:02:02,280 --> 00:02:04,170
để có Read Replica

50
00:02:04,170 --> 00:02:06,180
và chờ đến khi replication lag bằng 0

51
00:02:06,180 --> 00:02:08,910
để promote thành database cluster riêng.

52
00:02:08,910 --> 00:02:11,430
Nếu đó là PostgreSQL bên ngoài

53
00:02:11,430 --> 00:02:13,110
mà bạn muốn migrate sang Aurora,

54
00:02:13,110 --> 00:02:14,340
bạn có thể tạo backup

55
00:02:14,340 --> 00:02:16,830
và đặt backup vào Amazon S3,

56
00:02:16,830 --> 00:02:18,720
sau đó bạn import dữ liệu

57
00:02:18,720 --> 00:02:22,050
bằng AWS S3 Aurora extension

58
00:02:22,050 --> 00:02:24,660
và điều này tạo database mới.

59
00:02:24,660 --> 00:02:26,910
Cuối cùng, bạn cũng có thể dùng DMS để migrate

60
00:02:26,910 --> 00:02:29,970
từ PostgreSQL sang Amazon Aurora liên tục.

61
00:02:29,970 --> 00:02:31,620
Ok, bài học đến đây là hết.

62
00:02:31,620 --> 00:02:34,570
Hy vọng bạn thích và hẹn gặp bạn ở bài học tiếp theo.
