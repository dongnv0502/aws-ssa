1
00:00:00,090 --> 00:00:02,400
Giờ hãy dùng Systems Manager Parameter Store.

2
00:00:02,400 --> 00:00:04,670
Để làm vậy, tôi sẽ gõ "parameter"

3
00:00:04,670 --> 00:00:07,130
và nó đưa tôi thẳng tới Systems Manager.

4
00:00:07,130 --> 00:00:10,300
Bạn cũng có thể gõ "systems manager" để mở giao diện.

5
00:00:10,300 --> 00:00:12,110
Trong Systems Manager,

6
00:00:12,110 --> 00:00:13,200
để tìm Parameter Store,

7
00:00:13,200 --> 00:00:15,260
bạn kéo xuống hết ở khung bên trái

8
00:00:15,260 --> 00:00:16,239
và sẽ thấy nó ở đây,

9
00:00:16,239 --> 00:00:18,510
mục áp chót: Parameter Store.

10
00:00:18,510 --> 00:00:20,400
Parameter Store dùng cho secrets

11
00:00:20,400 --> 00:00:22,660
và quản lý dữ liệu cấu hình,

12
00:00:22,660 --> 00:00:25,200
giúp tập trung tất cả tham số

13
00:00:25,200 --> 00:00:27,360
trong tài khoản AWS của bạn — rất tiện.

14
00:00:27,360 --> 00:00:28,930
Đây là cách nó hoạt động:

15
00:00:28,930 --> 00:00:30,360
Bạn tạo một parameter mới,

16
00:00:30,360 --> 00:00:32,360
chỉ định kiểu và giá trị,

17
00:00:32,360 --> 00:00:33,550
rồi tham chiếu parameter đó

18
00:00:33,550 --> 00:00:35,360
trong lệnh hoặc mã nguồn của bạn,

19
00:00:35,360 --> 00:00:37,530
đúng như ta sắp làm.

20
00:00:37,530 --> 00:00:38,790
Bắt đầu nhé —

21
00:00:38,790 --> 00:00:40,343
bấm Create parameter.

22
00:00:41,320 --> 00:00:44,150
Tôi sẽ tạo một parameter tên my-app,

23
00:00:44,150 --> 00:00:45,940
ở môi trường dev.

24
00:00:45,940 --> 00:00:48,430
Tham số đầu tiên là database URL.

25
00:00:48,430 --> 00:00:53,430
Tôi mô tả: Database URL cho app của tôi ở môi trường dev.

26
00:00:53,700 --> 00:00:54,560
Được rồi.

27
00:00:54,560 --> 00:00:57,590
Ở đây có ba kiểu:

28
00:00:57,590 --> 00:00:58,423
String

29
00:00:58,423 --> 00:01:00,220
— nhập ký tự tùy ý;

30
00:01:00,220 --> 00:01:03,030
StringList — danh sách chuỗi, ngăn cách bởi dấu phẩy;

31
00:01:03,030 --> 00:01:05,720
hoặc SecureString — giá trị được mã hóa.

32
00:01:05,720 --> 00:01:07,370
Ta chọn String trước.

33
00:01:07,370 --> 00:01:10,140
Ví dụ, đây sẽ là một database URL.

34
00:01:10,140 --> 00:01:11,330
Bạn có thể điền gì cũng được,

35
00:01:11,330 --> 00:01:14,300
miễn không quá 4096 ký tự.

36
00:01:14,300 --> 00:01:16,420
Vậy tôi sẽ nhập:

37
00:01:16,420 --> 00:01:19,397
dev.database.stephanetheteacher.com.

38
00:01:22,760 --> 00:01:24,540
Chỉ là ví dụ ngẫu nhiên thôi,

39
00:01:24,540 --> 00:01:27,720
tôi sẽ thêm cổng 3306.

40
00:01:27,720 --> 00:01:30,040
Nói chung tùy bạn muốn đặt thế nào.

41
00:01:30,040 --> 00:01:32,300
URL ngẫu nhiên của tôi là

42
00:01:32,300 --> 00:01:36,430
dev.database.stephanetheteacher.com:3306.

43
00:01:36,430 --> 00:01:38,400
Tôi tạo parameter này.

44
00:01:38,400 --> 00:01:41,760
Yêu cầu tạo parameter đã thành công.

45
00:01:41,760 --> 00:01:43,880
Và ta đã có tham số đầu tiên.

46
00:01:43,880 --> 00:01:45,770
Ta có thể xem description,

47
00:01:45,770 --> 00:01:47,400
kiểu và cả version.

48
00:01:47,400 --> 00:01:50,200
Nếu sau này sửa tham số này,

49
00:01:50,200 --> 00:01:52,430
thì thời điểm sửa cuối sẽ thay đổi,

50
00:01:52,430 --> 00:01:55,270
và người sửa cuối cũng được lưu lại để truy vết.

51
00:01:55,270 --> 00:01:58,133
Nhấp vào tham số — bạn sẽ thấy phần tóm tắt.

52
00:02:00,480 --> 00:02:02,160
Có thể xem lịch sử giá trị

53
00:02:02,160 --> 00:02:03,680
và các thẻ (tags).

54
00:02:03,680 --> 00:02:05,780
Đây là db-url của chúng ta.

55
00:02:05,780 --> 00:02:08,169
Giờ tôi muốn tạo thêm một tham số nữa,

56
00:02:08,169 --> 00:02:10,060
vậy bấm Create parameter.

57
00:02:10,060 --> 00:02:14,620
Lần này tôi đặt là db-password cho database.

58
00:02:14,620 --> 00:02:17,800
Mô tả: mật khẩu database

59
00:02:17,800 --> 00:02:19,840
cho app của tôi ở môi trường dev.

60
00:02:19,840 --> 00:02:21,200
Ở đây tôi chọn SecureString,

61
00:02:21,200 --> 00:02:24,020
tức giá trị sẽ được mã hóa.

62
00:02:24,020 --> 00:02:26,210
Ta sẽ dùng KMS để mã hóa.

63
00:02:26,210 --> 00:02:29,730
Có thể dùng khóa ở tài khoản hiện tại hoặc tài khoản khác.

64
00:02:29,730 --> 00:02:32,110
Nguồn KMS key: tôi chọn tài khoản hiện tại.

65
00:02:32,110 --> 00:02:35,817
Ta có thể dùng khóa do AWS cung cấp,

66
00:02:35,817 --> 00:02:37,980
hoặc dùng chính key tôi đã tạo trước đó —

67
00:02:37,980 --> 00:02:41,560
tôi có một KMS key tên tutorial.

68
00:02:41,560 --> 00:02:44,230
Ta có thể dùng luôn khóa đó.

69
00:02:44,230 --> 00:02:45,610
Tùy bạn muốn quản trị bảo mật ra sao.

70
00:02:45,610 --> 00:02:47,200
Tôi sẽ dùng khóa "tutorial".

71
00:02:47,200 --> 00:02:49,140
Giờ nhập giá trị.

72
00:02:49,140 --> 00:02:50,200
Tôi ghi:

73
00:02:50,200 --> 00:02:55,190
"đây là mật khẩu dev".

74
00:02:55,190 --> 00:02:57,200
Ta không thấy vì đây là secret,

75
00:02:57,200 --> 00:02:58,760
và giá trị sẽ được mã hóa.

76
00:02:58,760 --> 00:03:00,140
Tôi tạo parameter.

77
00:03:00,140 --> 00:03:04,380
Giờ ta thấy có tham số mới ở đây,

78
00:03:04,380 --> 00:03:06,280
tên dev/db-password.

79
00:03:06,280 --> 00:03:08,910
Kiểu là SecureString — nghĩa là đã mã hóa —

80
00:03:08,910 --> 00:03:13,660
key ID là alias/tutorial, version là 1.

81
00:03:13,660 --> 00:03:16,720
Nhấp vào, ta thấy giá trị bị ẩn,

82
00:03:16,720 --> 00:03:18,220
nhưng có thể bấm Show

83
00:03:18,220 --> 00:03:20,350
để giải mã tức thời

84
00:03:20,350 --> 00:03:22,440
và hiển thị: đây là mật khẩu dev.

85
00:03:22,440 --> 00:03:23,440
Rất ổn rồi,

86
00:03:23,440 --> 00:03:27,370
giờ ta có thể sao chép cấu trúc này

87
00:03:27,370 --> 00:03:30,600
và làm lại — lần này cho prod.

88
00:03:30,600 --> 00:03:32,040
Hãy bấm Create parameter.

89
00:03:32,040 --> 00:03:34,330
Tôi sẽ tạo cho prod.

90
00:03:34,330 --> 00:03:36,530
Chỉ cần đổi một chút phần đường dẫn,

91
00:03:36,530 --> 00:03:38,293
và ghi Database URL,

92
00:03:39,709 --> 00:03:42,670
URL cho app của tôi ở prod.

93
00:03:42,670 --> 00:03:44,440
Tôi sẽ làm nhanh:

94
00:03:44,440 --> 00:03:48,173
prod.database.stephanetheteacher.com:3306.

95
00:03:52,170 --> 00:03:53,670
Tôi tạo tham số này.

96
00:03:53,670 --> 00:03:56,090
Và tạo thêm một tham số cuối cùng.

97
00:03:56,090 --> 00:03:58,620
Ta sẽ tạo db-password cho prod

98
00:03:58,620 --> 00:04:02,230
với mô tả môi trường production,

99
00:04:02,230 --> 00:04:06,540
chọn SecureString, vẫn dùng khóa tutorial như trước,

100
00:04:06,540 --> 00:04:09,860
và giá trị là "prod password", được chứ.

101
00:04:09,860 --> 00:04:11,020
Tôi tạo parameter.

102
00:04:11,020 --> 00:04:13,100
Giờ chúng ta có bốn tham số

103
00:04:13,100 --> 00:04:15,480
và muốn truy cập chúng.

104
00:04:15,480 --> 00:04:17,890
Ta có thể truy cập, ví dụ,

105
00:04:17,890 --> 00:04:20,290
bằng AWS CLI trước.

106
00:04:20,290 --> 00:04:23,440
Ta sẽ dùng CLI để lấy các tham số.

107
00:04:23,440 --> 00:04:25,970
Lệnh là get-parameters.

108
00:04:25,970 --> 00:04:28,450
Bạn phải truyền tham số "names" —

109
00:04:28,450 --> 00:04:29,420
chính là tên

110
00:04:29,420 --> 00:04:31,290
các parameter bạn muốn lấy.

111
00:04:31,290 --> 00:04:33,170
Tôi sẽ lấy

112
00:04:33,170 --> 00:04:37,494
db-url và db-password, rồi nhấn Enter.

113
00:04:37,494 --> 00:04:41,490
API trả về hai kết quả.

114
00:04:41,490 --> 00:04:44,280
Ta có db-password và db-url.

115
00:04:44,280 --> 00:04:46,170
Xem kỹ kết quả nhé.

116
00:04:46,170 --> 00:04:49,520
Đầu tiên, db-url có type là String,

117
00:04:49,520 --> 00:04:51,360
và đây là giá trị của nó.

118
00:04:51,360 --> 00:04:53,080
Vì nó không được mã hóa,

119
00:04:53,080 --> 00:04:55,620
giá trị trả về ở dạng rõ (decrypted),

120
00:04:55,620 --> 00:05:57,360
và version là 1.

121
00:05:00,460 --> 00:05:02,890
Rất tốt — ta thấy database URL và có thể dùng.

122
00:05:02,890 --> 00:05:04,660
Còn mật khẩu là SecureString,

123
00:05:04,660 --> 00:05:06,760
đây là giá trị của nó —

124
00:05:06,760 --> 00:05:10,690
đang ở dạng mã hóa.

125
00:05:10,690 --> 00:05:13,030
Vì vậy ta cần giải mã.

126
00:05:13,030 --> 00:05:14,940
Có cờ (flag) đặc biệt

127
00:05:14,940 --> 00:05:17,750
tên là --with-decryption — tôi sẽ thêm cờ này.

128
00:05:17,750 --> 00:05:20,030
Và lệnh sẽ kiểm tra

129
00:05:20,030 --> 00:05:23,740
xem tôi có quyền KMS để giải mã

130
00:05:23,740 --> 00:05:27,680
secret đã mã hóa bằng KMS key "tutorial" hay không.

131
00:05:27,680 --> 00:05:29,490
Nhấn Enter.

132
00:05:29,490 --> 00:05:31,440
Lần này, với SecureString,

133
00:05:31,440 --> 00:05:33,010
giá trị đã được giải mã

134
00:05:33,010 --> 00:05:36,340
vì tôi đã thêm --with-decryption.

135
00:05:36,340 --> 00:05:37,310
Rất hay —

136
00:05:37,310 --> 00:05:38,720
chỉ trong chốc lát

137
00:05:38,720 --> 00:05:40,900
ta vừa giữ được giá trị ở dạng mã hóa

138
00:05:40,900 --> 00:05:42,450
để những ai không có quyền KMS

139
00:05:42,450 --> 00:05:44,050
không thể đọc mật khẩu của tôi,

140
00:05:44,050 --> 00:05:45,410
còn nếu tôi có quyền KMS

141
00:05:45,410 --> 00:05:46,690
thì chỉ cần thêm cờ --with-decryption

142
00:05:46,690 --> 00:05:49,850
và tôi có được giá trị mật khẩu dev.

143
00:05:49,850 --> 00:05:50,683
Rất gọn gàng.

144
00:05:50,683 --> 00:05:53,290
Tiếp theo, ta có thể dùng

145
00:05:53,290 --> 00:05:54,750
aws ssm get-parameters-by-path

146
00:06:02,300 --> 00:06:04,230
và xem phần trợ giúp (help).

147
00:06:04,230 --> 00:06:05,450
get-parameters-by-path

148
00:06:05,450 --> 00:06:06,770
cho phép duyệt theo một path

149
00:06:06,770 --> 00:06:09,010
và bạn phải cung cấp tên path.

150
00:06:09,010 --> 00:06:10,970
Path phải bắt đầu bằng dấu gạch chéo (/).

151
00:06:10,970 --> 00:06:13,270
Vậy nếu gọi get-parameters-by-path,

152
00:06:13,270 --> 00:06:14,800
tôi sẽ xóa bớt,

153
00:06:14,800 --> 00:06:18,180
chỉ giữ /my-app/dev/.

154
00:06:18,180 --> 00:06:22,420
Tôi gọi get-parameters-by-path

155
00:06:22,420 --> 00:06:24,830
với path là chuỗi trên.

156
00:06:24,830 --> 00:06:25,930
Lệnh sẽ truy vấn

157
00:06:25,930 --> 00:06:29,060
tất cả parameter dưới path này.

158
00:06:29,060 --> 00:06:30,960
Đây là lý do ta tổ chức dạng cây.

159
00:06:30,960 --> 00:06:32,630
Kết quả trả về, dĩ nhiên,

160
00:06:32,630 --> 00:06:34,240
phụ thuộc vào những gì ta đã tạo.

161
00:06:34,240 --> 00:06:37,900
Giờ ta có thể lên một mức, chỉ còn /my-app,

162
00:06:37,900 --> 00:06:40,230
và dùng --recursive để lấy

163
00:06:40,230 --> 00:06:43,200
tất cả parameter ở dưới my-app một cách đệ quy.

164
00:06:43,200 --> 00:06:45,880
Nhấn Enter — ta nhận lại cả bốn tham số:

165
00:06:45,880 --> 00:06:49,020
db-password, db-url cho dev; db-password, db-url cho prod.

166
00:06:50,640 --> 00:06:52,420
Nhờ cấu trúc cây này,

167
00:06:52,420 --> 00:06:55,490
ta có thể tổ chức secrets gọn gàng

168
00:06:55,490 --> 00:06:58,600
và truy xuất tất cả cùng lúc — rất tiện.

169
00:06:58,600 --> 00:06:59,690
Vậy là xong.

170
00:06:59,690 --> 00:07:01,270
Bạn cũng có thể thêm

171
00:07:01,270 --> 00:07:04,650
cờ --with-decryption để nhận giá trị đã giải mã.

172
00:07:04,650 --> 00:07:05,960
Đó là phần CLI.

173
00:07:05,960 --> 00:07:07,360
Trong bài tiếp theo, tôi sẽ cho bạn xem

174
00:07:07,360 --> 00:07:08,410
cách làm với AWS Lambda

175
00:07:08,410 --> 00:07:10,470
— cũng rất đơn giản.

176
00:07:10,470 --> 00:07:12,020
Hẹn gặp bạn ở bài sau.

